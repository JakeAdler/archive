{"version":3,"sources":["components/StartingScreen/StartingScreen.js","components/Card/Card.js","components/List/List.js","components/Score/Score.js","components/Game/Game.js","components/Title/Title.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["StartingScreen","react_default","a","createElement","className","Component","GameCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","changeScore","target","id","bind","assertThisInitialized","Card_default","onClick","Img","variant","src","url","breed","Title","List","state","imgList","currentImgs","usedImg","getImg","data","breedList","Breeds","keys","breeds","i","Key","Math","floor","random","length","push","link","concat","axios","get","Promise","all","then","res","imglist","map","img","objectSpread","setState","newImgs","console","log","addScore","indexOf","clearScore","toConsumableArray","getNewImg","scoreChange","arr","randomNum","filter","obj","index","splice","_this2","components_Card_Card","message","key","Score","score","bestScore","Game","started","status","startGame","scoreToZero","components_Score_Score","components_List_List","components_StartingScreen_StartingScreen","Container","components_Title_Title","components_Game_Game","App","components_Container_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a98b601.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass StartingScreen extends Component {\n\n\n    render(){\n        return(\n            <div className=\"instructions\">\n                <h3>Instructions</h3>\n                <p>To play, you may click on any picture, but only once! Each unique picture that you click earns you 1 pt.</p>\n            </div>\n        )\n      \n    }\n}\n\nexport default StartingScreen;","import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport './Card.css'\nclass GameCard extends Component {\n    constructor(props){\n        super(props)\n        this.handleClick = this.handleClick.bind(this)\n    }\n   \n\n    handleClick = (e) => {\n        this.props.changeScore(e.target.id)\n    } \n  \n    render(){\n        return(\n           \n            <Card onClick={this.handleClick}>\n                <Card.Img variant=\"top\" src={this.props.url} \n                id={this.props.breed}/>\n                <Card.Title>{this.props.breed}</Card.Title>\n            </Card>\n        \n        )\n    }\n}\n\nexport default GameCard;","import React, { Component } from 'react';\nimport Card from '../Card/Card';\nimport breeds from './breeds.json';\nimport axios from 'axios';\n//import Card from '../Card/Card'\n\nclass List extends Component {\n\n    state = {\n        imgList: [],\n        currentImgs: [],\n        usedImg: []\n    }\n    \n    getImg = () =>{\n        let data = []\n        let breedList = []\n        let Breeds = Object.keys(breeds)\n        for (let i = 0; i < 25; i++) {\n            let randomNum = Math.floor(Math.random() * Breeds.length);\n            let Key = Breeds[randomNum];\n            breedList.push(Key)\n            let link =`https://dog.ceo/api/breed/${Key}/images/random`;\n            data.push(axios.get(link))\n        }\n        // Resolving all the promises\n        Promise.all(data).then((res)=> {\n            let imglist = res.map((img, i) => {\n                return {...img, breed: breedList[i]};\n            })\n            this.setState({imgList: imglist},\n                () => {\n\n                    let newImgs = []\n                    for (let i = 0; i < 10; i++) {\n                        newImgs.push(this.state.imgList[i])\n                    }\n                    \n                    this.setState({currentImgs: newImgs},\n                        ()=> {\n                            console.log(this.state, \"INITIAL state\")\n                        })\n                        \n                })\n            \n        }) \n    \n    }\n  \n    addScore = (id) => {\n      \n        if (this.state.usedImg.length > 0){\n            // if this is not the first image being clicked, check if it has been clicked before\n        \n           let isFound = this.state.usedImg.indexOf(id)\n                if (isFound > -1){\n                // if the image has been clicked before, then set score to 0 and reset usedImg to empty\n                 this.getImg()\n                 this.props.clearScore()\n                 this.setState({usedImg: []})\n                } else {\n                    //if image is not found, add it to usedImg\n                    this.setState({usedImg: [...this.state.usedImg, id]},\n                        ()=>{\n                            console.log(this.state, \"ADDED TO USED IMG\")\n                            this.getNewImg(id)\n                        })  \n                        // Set score to 0 and get new img\n                        this.props.scoreChange()\n                       \n                }   \n        } else if (this.state.usedImg.length === 0) {\n            // if image is the first being clicked, add it straight to usedImg\n            this.setState({usedImg: [...this.state.usedImg, id]},\n                ()=>{\n                    console.log(this.state, \"USED IMAGE SETTING STATE\")        \n                    this.props.scoreChange()\n                    this.getNewImg(id);\n                })    \n        }  \n    }\n    getNewImg = (id) =>{\n        let arr = this.state.currentImgs\n        console.log(arr, \"STATE FROM GETNEWIMAGE\")\n        let randomNum = Math.floor(Math.random() * this.state.imgList.length);\n        this.state.currentImgs.filter( obj =>{\n            if (obj.breed === id) {\n                let index = this.state.currentImgs.indexOf(obj)\n                console.log(index)\n                arr.splice(index, 1, this.state.imgList[randomNum]);\n                \n            }\n        })\n    }\n\n    componentDidMount(){\n        this.getImg()\n     \n    }\n    render(){\n        \n        if (this.state.currentImgs.length) {\n            return this.state.currentImgs && this.state.currentImgs.map((img, i)=>{\n                return(\n                <Card url={img.data.message} breed={img.breed} \n                    changeScore={this.addScore} key={i}/>\n                    )\n            })\n        } else {\n            return <h3>Loading...</h3>\n        } \n        \n    }   \n\n}\nexport default List;","import React, { Component } from 'react';\nimport './Score.css';\n\n\nclass Score extends Component {\n\n    render(){\n        return(\n        <div className='d-flex flex-row justify-content-around'>\n            <h3>Score: {this.props.score}</h3>\n            <h3>Best Score: {this.props.bestScore}</h3>\n        </div>\n        )\n    }\n}\n\nexport default Score;","import React, { Component } from 'react';\n// import Clock from '../Clock/Clock';\nimport StartingScreen from '../StartingScreen/StartingScreen';\nimport List from '../List/List'\nimport Score from '../Score/Score'\nimport './Game.css'\n\n\nclass Game extends Component {\n\n    state = {\n        started: false,\n        score : 0,\n        bestScore: 0,\n        status: 'loading',\n    }\n   \n    startGame = () => {\n        this.setState({ started: true})\n    }\n    addScore = () => {\n            this.setState({\n                score: this.state.score + 1\n            },\n            ()=>{\n                if(this.state.score > this.state.bestScore){\n                    this.setState({bestScore: this.state.score})\n                }\n            })\n            \n        \n    }\n    scoreToZero = () => {\n        this.setState({score: 0})\n    }\n  \n\n    render() {\n        return (\n            <div className=\"Game container\">\n                \n                \n                {\n                    !this.state.started?\n                        <div>\n                        <StartingScreen />\n                        <button onClick={this.startGame}> GO</button>\n                        </div>\n                    :\n                    <div>\n                            <Score score={this.state.score} bestScore={this.state.bestScore}/>\n                        <div>\n                        { this.state.score < 0?\n                            <h3>You lose</h3>\n                            :\n                           <List scoreChange={this.addScore.bind(this)} clearScore={this.scoreToZero.bind(this)}/>\n                        }\n                        </div>\n                    </div>\n                }\n            \n            </div>\n        )\n    }\n    \n}\n\nexport default Game;","import React from 'react';\nimport './Title.css'\n\n\nconst Title = () => {\n    return(\n        <h1 className=\"Title\">The Clicky Game</h1>\n    )\n}\n\nexport default Title;","import React, { Component } from 'react';\nimport './Container.css';\nimport Game from '../Game/Game';\nimport Title from '../Title/Title'\n\nclass Container extends Component {\n    state ={\n        started: false\n    };\n\n    render() {\n        return (\n        <div>    \n          <Title />\n          <Game />\n        </div>\n        )\n    }\n}\n\nexport default Container;","import React, { Component } from 'react';\nimport Container from \"./components/Container/Container\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return <Container />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}